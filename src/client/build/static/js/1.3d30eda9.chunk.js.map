{"version":3,"sources":["../node_modules/@material-ui/core/esm/FormLabel/FormLabel.js","../node_modules/@material-ui/core/esm/InputLabel/InputLabel.js","../node_modules/@material-ui/core/esm/FormControl/FormControl.js","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js","../node_modules/@material-ui/core/esm/TextField/TextField.js"],"names":["FormLabel","React","forwardRef","props","ref","children","classes","className","_props$component","color","component","Component","other","disabled","error","filled","focused","required","_objectWithoutProperties","muiFormControl","useFormControl","fcs","formControlState","states","createElement","_extends","clsx","root","concat","capitalize","asterisk","withStyles","theme","palette","text","secondary","typography","body1","lineHeight","padding","primary","main","colorSecondary","name","InputLabel","_props$disableAnimati","disableAnimation","shrinkProp","margin","shrink","variant","adornedStart","formControl","animated","dense","marginDense","outlined","display","transformOrigin","position","left","top","transform","transition","transitions","create","duration","shorter","easing","easeOut","zIndex","pointerEvents","FormControl","_props$disabled","_props$error","_props$fullWidth","fullWidth","_props$hiddenLabel","hiddenLabel","_props$margin","_props$color","_props$required","_props$variant","_React$useState","useState","initialAdornedStart","Children","forEach","child","isMuiElement","input","isAdornedStart","setAdornedStart","_React$useState2","initialFilled","isFilled","setFilled","_React$useState3","setFocused","onFilled","useCallback","childContext","onBlur","onEmpty","onFocus","registerEffect","FormControlContext","Provider","value","flexDirection","minWidth","border","verticalAlign","marginNormal","marginTop","marginBottom","width","FormHelperText","contained","caption","textAlign","minHeight","variantComponent","standard","Input","FilledInput","OutlinedInput","TextField","autoComplete","autoFocus","defaultValue","FormHelperTextProps","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","onChange","placeholder","rows","rowsMax","_props$select","select","SelectProps","type","labelWidth","setLabelWidth","labelRef","useRef","useEffect","labelNode","ReactDOM","findDOMNode","current","offsetWidth","InputMore","notched","native","undefined","helperTextId","inputLabelId","InputComponent","InputElement","htmlFor","Select","labelId"],"mappings":"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","file":"static/js/1.3d30eda9.chunk.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.body1, {\n      lineHeight: 1,\n      padding: 0,\n      '&$focused': {\n        color: theme.palette.primary.main\n      },\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {\n      '&$focused': {\n        color: theme.palette.secondary.main\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Styles applied to the asterisk element. */\n    asterisk: {\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }\n  };\n};\nvar FormLabel = React.forwardRef(function FormLabel(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'label' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      required = props.required,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),\n    ref: ref\n  }, other), children, fcs.required && React.createElement(\"span\", {\n    className: clsx(classes.asterisk, fcs.error && classes.error)\n  }, \"\\u2009\", '*'));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormLabel.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormLabel'\n})(FormLabel);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      transformOrigin: 'top left'\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Pseudo-class applied to the asterisk element. */\n    asterisk: {},\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      // slight alteration to spec spacing to match visual spec result\n      transform: 'translate(0, 24px) scale(1)'\n    },\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      // Compensation for the `Input.inputDense` style.\n      transform: 'translate(0, 21px) scale(1)'\n    },\n\n    /* Styles applied to the `input` element if `shrink={true}`. */\n    shrink: {\n      transform: 'translate(0, 1.5px) scale(0.75)',\n      transformOrigin: 'top left'\n    },\n\n    /* Styles applied to the `input` element if `disableAnimation={false}`. */\n    animated: {\n      transition: theme.transitions.create(['color', 'transform'], {\n        duration: theme.transitions.duration.shorter,\n        easing: theme.transitions.easing.easeOut\n      })\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"`. */\n    filled: {\n      // Chrome's autofill feature gives the input field a yellow background.\n      // Since the input field is behind the label in the HTML tree,\n      // the input field is drawn last and hides the label with an opaque background color.\n      // zIndex: 1 will raise the label above opaque background-colors of input.\n      zIndex: 1,\n      pointerEvents: 'none',\n      transform: 'translate(12px, 20px) scale(1)',\n      '&$marginDense': {\n        transform: 'translate(12px, 17px) scale(1)'\n      },\n      '&$shrink': {\n        transform: 'translate(12px, 10px) scale(0.75)',\n        '&$marginDense': {\n          transform: 'translate(12px, 7px) scale(0.75)'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      // see comment above on filled.zIndex\n      zIndex: 1,\n      pointerEvents: 'none',\n      transform: 'translate(14px, 20px) scale(1)',\n      '&$marginDense': {\n        transform: 'translate(14px, 12px) scale(1)'\n      },\n      '&$shrink': {\n        transform: 'translate(14px, -6px) scale(0.75)'\n      }\n    }\n  };\n};\nvar InputLabel = React.forwardRef(function InputLabel(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$disableAnimati = props.disableAnimation,\n      disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,\n      margin = props.margin,\n      shrinkProp = props.shrink,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disableAnimation\", \"margin\", \"shrink\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var shrink = shrinkProp;\n\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['margin', 'variant']\n  });\n  return React.createElement(FormLabel, _extends({\n    \"data-shrink\": shrink,\n    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, {\n      dense: classes.marginDense\n    }[fcs.margin], {\n      filled: classes.filled,\n      outlined: classes.outlined\n    }[fcs.variant]),\n    classes: {\n      focused: classes.focused,\n      disabled: classes.disabled,\n      error: classes.error,\n      required: classes.required,\n      asterisk: classes.asterisk\n    },\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputLabel.propTypes = {\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * If `true`, the transition animation is disabled.\n   */\n  disableAnimation: PropTypes.bool,\n\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputLabel'\n})(InputLabel);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\n\nvar FormControl = React.forwardRef(function FormControl(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$hiddenLabel = props.hiddenLabel,\n      hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,\n      _props$margin = props.margin,\n      margin = _props$margin === void 0 ? 'none' : _props$margin,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"hiddenLabel\", \"margin\", \"color\", \"required\", \"variant\"]);\n\n  var _React$useState = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        var input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  }),\n      adornedStart = _React$useState[0],\n      setAdornedStart = _React$useState[1];\n\n  var _React$useState2 = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  }),\n      filled = _React$useState2[0],\n      setFilled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  var registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var registeredInput = React.useRef(false);\n\n    registerEffect = function registerEffect() {\n      if (registeredInput.current) {\n        console.error(['Material-UI: there are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return function () {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  var onFilled = React.useCallback(function () {\n    setFilled(true);\n  }, []);\n  var onEmpty = React.useCallback(function () {\n    setFilled(false);\n  }, []);\n  var childContext = {\n    adornedStart: adornedStart,\n    setAdornedStart: setAdornedStart,\n    color: color,\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    hiddenLabel: hiddenLabel,\n    margin: margin,\n    onBlur: function onBlur() {\n      setFocused(false);\n    },\n    onEmpty: onEmpty,\n    onFilled: onFilled,\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    registerEffect: registerEffect,\n    required: required,\n    variant: variant\n  };\n  return React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[\"margin\".concat(capitalize(margin))], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 8,\n      lineHeight: '1em',\n      minHeight: '1em',\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      margin: '8px 14px 0'\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = React.forwardRef(function FormHelperText(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, {\n      dense: classes.marginDense\n    }[fcs.margin]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport Input from '../Input';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport InputLabel from '../InputLabel';\nimport FormControl from '../FormControl';\nimport FormHelperText from '../FormHelperText';\nimport Select from '../Select';\nimport withStyles from '../styles/withStyles';\nvar variantComponent = {\n  standard: Input,\n  filled: FilledInput,\n  outlined: OutlinedInput\n};\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {}\n};\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * - [FormControl](/api/form-control/)\n * - [InputLabel](/api/input-label/)\n * - [FilledInput](/api/filled-input/)\n * - [OutlinedInput](/api/outlined-input/)\n * - [Input](/api/input/)\n * - [FormHelperText](/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\nvar TextField = React.forwardRef(function TextField(props, ref) {\n  var autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      defaultValue = props.defaultValue,\n      error = props.error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      hiddenLabel = props.hiddenLabel,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      multiline = props.multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$select = props.select,\n      select = _props$select === void 0 ? false : _props$select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoFocus\", \"children\", \"classes\", \"className\", \"color\", \"defaultValue\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"hiddenLabel\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"variant\"]);\n\n  var _React$useState = React.useState(0),\n      labelWidth = _React$useState[0],\n      setLabelWidth = _React$useState[1];\n\n  var labelRef = React.useRef(null);\n  React.useEffect(function () {\n    if (variant === 'outlined') {\n      // #StrictMode ready\n      var labelNode = ReactDOM.findDOMNode(labelRef.current);\n      setLabelWidth(labelNode != null ? labelNode.offsetWidth : 0);\n    }\n  }, [variant, required, label]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (select && !children) {\n      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');\n    }\n  }\n\n  var InputMore = {};\n\n  if (variant === 'outlined') {\n    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {\n      InputMore.notched = InputLabelProps.shrink;\n    }\n\n    InputMore.labelWidth = labelWidth;\n  }\n\n  if (select) {\n    // unset defaults from textbox inputs\n    if (!SelectProps || !SelectProps.native) {\n      InputMore.id = undefined;\n    }\n\n    InputMore['aria-describedby'] = undefined;\n  }\n\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n  var inputLabelId = label && id ? \"\".concat(id, \"-label\") : undefined;\n  var InputComponent = variantComponent[variant];\n  var InputElement = React.createElement(InputComponent, _extends({\n    \"aria-describedby\": helperTextId,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputMore, InputProps));\n  return React.createElement(FormControl, _extends({\n    className: clsx(classes.root, className),\n    error: error,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    ref: ref,\n    required: required,\n    color: color,\n    variant: variant\n  }, other), label && React.createElement(InputLabel, _extends({\n    htmlFor: id,\n    ref: labelRef,\n    id: inputLabelId\n  }, InputLabelProps), label), select ? React.createElement(Select, _extends({\n    \"aria-describedby\": helperTextId,\n    id: id,\n    labelId: inputLabelId,\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && React.createElement(FormHelperText, _extends({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextField.propTypes = {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default value of the `input` element.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.\n   */\n  FormHelperTextProps: PropTypes.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Props applied to the [`InputLabel`](/api/input-label/) element.\n   */\n  InputLabelProps: PropTypes.object,\n\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/api/filled-input/),\n   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * The label content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * If `true`, the label is displayed as required and the `input` element` will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: PropTypes.bool,\n\n  /**\n   * Props applied to the [`Select`](/api/select/) element.\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTextField'\n})(TextField);"],"sourceRoot":""}